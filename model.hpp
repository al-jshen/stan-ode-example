
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 33> locations_array__ = 
{" (found before start of program)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 23, column 2 to column 23)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 24, column 2 to column 24)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 25, column 2 to column 28)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 30, column 2 to column 38)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 31, column 2 to column 34)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 34, column 2 to column 77)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 48, column 2 to column 76)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 39, column 2 to column 26)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 40, column 2 to column 29)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 41, column 2 to column 23)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 44, column 2 to column 41)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 11, column 2 to column 21)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 12, column 2 to column 24)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 13, column 2 to column 20)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 14, column 2 to column 10)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 15, column 13 to column 18)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 15, column 2 to column 20)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 16, column 12 to column 17)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 16, column 2 to column 19)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 18, column 2 to column 21)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 19, column 13 to column 18)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 19, column 2 to column 20)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 31, column 9 to column 13)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 34, column 22 to column 27)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 34, column 9 to column 13)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 48, column 21 to column 26)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 48, column 9 to column 13)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 3, column 4 to column 37)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 4, column 4 to column 50)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 5, column 4 to column 29)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 6, column 4 to column 41)",
 " (in '/home/js/programs/stan-ode-example/model.stan', line 2, column 54 to line 7, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
sir(const T0__& t, const T1__& y_arg__, const T2__& beta, const T3__& gamma,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  int current_statement__ = 0; 
  const auto& y = to_ref(y_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ dSdt;
    dSdt = DUMMY_VAR__;
    
    current_statement__ = 28;
    dSdt = ((-beta * rvalue(y, "y", index_uni(1))) *
             rvalue(y, "y", index_uni(2)));
    local_scalar_t__ dIdt;
    dIdt = DUMMY_VAR__;
    
    current_statement__ = 29;
    dIdt = (((beta * rvalue(y, "y", index_uni(1))) *
              rvalue(y, "y", index_uni(2))) -
             (gamma * rvalue(y, "y", index_uni(2))));
    local_scalar_t__ dRdt;
    dRdt = DUMMY_VAR__;
    
    current_statement__ = 30;
    dRdt = (gamma * rvalue(y, "y", index_uni(2)));
    current_statement__ = 31;
    return to_vector((Eigen::Matrix<local_scalar_t__,1,-1>(3) << dSdt, dIdt,
             dRdt).finished());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sir_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& y, const T2__& beta, const T3__& gamma,
           std::ostream* pstream__)  const 
{
return sir(t, y, beta, gamma, pstream__);
}
};


struct sir_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& y, std::ostream* pstream__,
           const T2__& beta, const T3__& gamma)  const 
{
return sir(t, y, beta, gamma, pstream__);
}
};

class model_model final : public model_base_crtp<model_model> {

 private:
  int n_obs;
  int n_sample;
  int n_eq;
  double t0;
  std::vector<double> t_obs;
  std::vector<int> y_obs;
  int n_gen;
  std::vector<double> t_gen; 
  
 
 public:
  ~model_model() { }
  
  inline std::string model_name() const final { return "model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  model_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","n_obs","int",
           std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 12;
      check_greater_or_equal(function__, "n_obs", n_obs, 1);
      current_statement__ = 13;
      context__.validate_dims("data initialization","n_sample","int",
           std::vector<size_t>{});
      n_sample = std::numeric_limits<int>::min();
      
      current_statement__ = 13;
      n_sample = context__.vals_i("n_sample")[(1 - 1)];
      current_statement__ = 13;
      check_greater_or_equal(function__, "n_sample", n_sample, 1);
      current_statement__ = 14;
      context__.validate_dims("data initialization","n_eq","int",
           std::vector<size_t>{});
      n_eq = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      n_eq = context__.vals_i("n_eq")[(1 - 1)];
      current_statement__ = 14;
      check_greater_or_equal(function__, "n_eq", n_eq, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization","t0","double",
           std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 16;
      validate_non_negative_index("t_obs", "n_obs", n_obs);
      current_statement__ = 17;
      context__.validate_dims("data initialization","t_obs","double",
           std::vector<size_t>{static_cast<size_t>(n_obs)});
      t_obs = std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 17;
      t_obs = context__.vals_r("t_obs");
      current_statement__ = 18;
      validate_non_negative_index("y_obs", "n_obs", n_obs);
      current_statement__ = 19;
      context__.validate_dims("data initialization","y_obs","int",
           std::vector<size_t>{static_cast<size_t>(n_obs)});
      y_obs = std::vector<int>(n_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 19;
      y_obs = context__.vals_i("y_obs");
      current_statement__ = 20;
      context__.validate_dims("data initialization","n_gen","int",
           std::vector<size_t>{});
      n_gen = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      n_gen = context__.vals_i("n_gen")[(1 - 1)];
      current_statement__ = 20;
      check_greater_or_equal(function__, "n_gen", n_gen, 1);
      current_statement__ = 21;
      validate_non_negative_index("t_gen", "n_gen", n_gen);
      current_statement__ = 22;
      context__.validate_dims("data initialization","t_gen","double",
           std::vector<size_t>{static_cast<size_t>(n_gen)});
      t_gen = std::vector<double>(n_gen, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 22;
      t_gen = context__.vals_r("t_gen");
      current_statement__ = 23;
      validate_non_negative_index("y0", "n_eq", n_eq);
      current_statement__ = 24;
      validate_non_negative_index("y_pred", "n_obs", n_obs);
      current_statement__ = 25;
      validate_non_negative_index("y_pred", "n_eq", n_eq);
      current_statement__ = 26;
      validate_non_negative_index("y_gen", "n_gen", n_gen);
      current_statement__ = 27;
      validate_non_negative_index("y_gen", "n_eq", n_eq);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ p_beta;
      p_beta = DUMMY_VAR__;
      
      current_statement__ = 1;
      p_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ p_gamma;
      p_gamma = DUMMY_VAR__;
      
      current_statement__ = 2;
      p_gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ S0;
      S0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      S0 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      local_scalar_t__ I0;
      I0 = DUMMY_VAR__;
      
      current_statement__ = 4;
      I0 = (1. - S0);
      Eigen::Matrix<local_scalar_t__, -1, 1> y0;
      y0 = Eigen::Matrix<local_scalar_t__, -1, 1>(n_eq);
      stan::math::fill(y0, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(y0, (Eigen::Matrix<local_scalar_t__,-1,1>(3) << S0, I0,
        0.).finished(), "assigning variable y0");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y_pred;
      y_pred = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_obs, Eigen::Matrix<local_scalar_t__, -1, 1>(n_eq));
      stan::math::fill(y_pred, DUMMY_VAR__);
      
      current_statement__ = 6;
      assign(y_pred,
        ode_rk45(sir_odefunctor__(), y0, t0, t_obs, pstream__, p_beta,
          p_gamma), "assigning variable y_pred");
      current_statement__ = 4;
      check_greater_or_equal(function__, "I0", I0, 0);
      current_statement__ = 4;
      check_less_or_equal(function__, "I0", I0, 1);
      {
        current_statement__ = 8;
        lp_accum__.add(exponential_lpdf<propto__>(p_beta, 1));
        current_statement__ = 9;
        lp_accum__.add(exponential_lpdf<propto__>(p_gamma, 0.1));
        current_statement__ = 10;
        lp_accum__.add(uniform_lpdf<propto__>(S0, 0., 1.));
        current_statement__ = 11;
        lp_accum__.add(
          binomial_lpmf<propto__>(y_obs, n_sample,
            rvalue(y_pred, "y_pred", index_omni(), index_uni(2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double p_beta;
      p_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double p_gamma;
      p_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double S0;
      S0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      S0 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      double I0;
      I0 = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> y0;
      y0 = Eigen::Matrix<double, -1, 1>(n_eq);
      stan::math::fill(y0, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> y_pred;
      y_pred = std::vector<Eigen::Matrix<double, -1, 1>>(n_obs, Eigen::Matrix<double, -1, 1>(n_eq));
      stan::math::fill(y_pred, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(p_beta);
      vars__.emplace_back(p_gamma);
      vars__.emplace_back(S0);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      I0 = (1. - S0);
      current_statement__ = 5;
      assign(y0, (Eigen::Matrix<local_scalar_t__,-1,1>(3) << S0, I0,
        0.).finished(), "assigning variable y0");
      current_statement__ = 6;
      assign(y_pred,
        ode_rk45(sir_odefunctor__(), y0, t0, t_obs, pstream__, p_beta,
          p_gamma), "assigning variable y_pred");
      current_statement__ = 4;
      check_greater_or_equal(function__, "I0", I0, 0);
      current_statement__ = 4;
      check_less_or_equal(function__, "I0", I0, 1);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(I0);
        for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
          vars__.emplace_back(y0[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            vars__.emplace_back(y_pred[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> y_gen;
      y_gen = std::vector<Eigen::Matrix<double, -1, 1>>(n_gen, Eigen::Matrix<double, -1, 1>(n_eq));
      stan::math::fill(y_gen, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(y_gen,
        ode_rk45(sir_odefunctor__(), y0, t0, t_gen, pstream__, p_beta,
          p_gamma), "assigning variable y_gen");
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_gen; ++sym2__) {
          vars__.emplace_back(y_gen[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double p_beta;
      p_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_beta = context__.vals_r("p_beta")[(1 - 1)];
      double p_beta_free__;
      p_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_beta_free__ = stan::math::lb_free(p_beta, 0);
      double p_gamma;
      p_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_gamma = context__.vals_r("p_gamma")[(1 - 1)];
      double p_gamma_free__;
      p_gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_gamma_free__ = stan::math::lb_free(p_gamma, 0);
      double S0;
      S0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      S0 = context__.vals_r("S0")[(1 - 1)];
      double S0_free__;
      S0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      S0_free__ = stan::math::lub_free(S0, 0, 1);
      vars__.emplace_back(p_beta_free__);
      vars__.emplace_back(p_gamma_free__);
      vars__.emplace_back(S0_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_beta", "p_gamma", "S0", "I0", "y0",
      "y_pred", "y_gen"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(n_eq)},
      std::vector<size_t>{static_cast<size_t>(n_obs),
                          static_cast<size_t>(n_eq)},
      std::vector<size_t>{static_cast<size_t>(n_gen),
                          static_cast<size_t>(n_eq)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_beta");
    param_names__.emplace_back(std::string() + "p_gamma");
    param_names__.emplace_back(std::string() + "S0");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "I0");
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_gen; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_gen" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_beta");
    param_names__.emplace_back(std::string() + "p_gamma");
    param_names__.emplace_back(std::string() + "S0");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "I0");
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_eq; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_gen; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_gen" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"S0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"I0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"y_gen\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_gen) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"S0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"I0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"y_gen\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_gen) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_eq) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = model_model_namespace::model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_model_namespace::profiles__;
}

#endif


